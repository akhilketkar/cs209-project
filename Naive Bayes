import numpy as np
import pandas as pd
from collections import OrderedDict
import nltk.classify.util
from nltk.classify import NaiveBayesClassifier
from nltk.corpus import movie_reviews
import re
import zipfile

import sklearn.cross_validation

avatar_positive = "Avatar showed me something I have never seen before. It reminded me of what movies can do, of what they're capable of, of what the experience of sitting down for three hours in a dark room can really mean."
avatar_negative = "Cameron's $300 million baby is nothing but a 5- and 10-cent snore."

# Function to make dictionary of (word, True)
def word_feats(words):
    return dict([(word, True) for word in words])

# Get negative and positive words
negids = movie_reviews.fileids('neg')
posids = movie_reviews.fileids('pos')

# Return dictoionary for each word
negfeats = [(word_feats(movie_reviews.words(fileids=[f])), 
             'neg') for f in negids]
posfeats = [(word_feats(movie_reviews.words(fileids=[f])), 
             'pos') for f in posids]

# Make training and test cutoff
negcutoff = len(negfeats)*3/4
poscutoff = len(posfeats)*3/4
 
# Split in to training and test set
trainfeats = negfeats[:negcutoff] + posfeats[:poscutoff]
testfeats = negfeats[negcutoff:] + posfeats[poscutoff:]
print 'train on %d instances, test on %d instances' % (len(trainfeats), len(testfeats))

# Train classifier
classifier = NaiveBayesClassifier.train(trainfeats)
print 'accuracy:', nltk.classify.util.accuracy(classifier, testfeats)
classifier.show_most_informative_features()

# Function that returns tags of verbs, adverb, adjective, nouns, etc.
def tag_pos(tokenized):
    tagged = nltk.pos_tag(tokenized)
            
    print "The tags are: ", tagged
    print 
    descrip = re.findall(r'\(\'(\w*)\',\s\'(VB\w?|JJ\w?|NN\w?|RB\w?)\''
                         , str(tagged))
    parts = re.findall(r'\(\'(\w*)\'', str(descrip))
    return parts

# Return positive and negative review scores
def classifer_probabilty(sent):
    try: 
        tokenized = nltk.word_tokenize(sent)
        tags = tag_pos(tokenized)
        
        print "The meaningful words to review: ", tags
        
        probs = map(lambda x: classifier.prob_classify({x: True}), 
                    tags)
        pos_review = zip(tags, map(lambda x: x.prob("pos"), probs))
        neg_review = zip(tags, map(lambda y: y.prob("neg"), probs))
        
        print "---------------------------------------------------------"
        print "The movie review's words probability of being positive"
        print  pos_review
        print "---------------------------------------------------------"

    except Exception, e:
        print 'failed main loop of classifer probability'
        print str(e)

    return pos_review, neg_review

# Return positive and negative words
def pos_parts(review):
    pos=[]
    neg=[]
    for x in review:
        if (x[1] > 0.5) == True:
            pos.append(x)
        elif (x[1] < 0.5) == True:
            neg.append((x[0],1-x[1]))
    return pos,neg

pos_prob, neg_prob = classifer_probabilty(avatar_positive)
positive_review, negative_review = pos_parts(pos_prob)

print 'There are', len(pos_prob), 'words in the review'
print len(positive_review), 'are positive'
print len(negative_review), 'are negative'
print len(pos_prob) - (len(negative_review) + 
                       len(positive_review)), 'are netural'
print 
if len(positive_review) > len(negative_review):
    print 'The movie review is positive with an' 
    print 'average score of', np.mean([x[1] for x in positive_review])

elif len(negative_review) > len(positive_review):
    print 'The movie review is neagtive with an' 
    print 'average score of', np.mean([x[1] for x in negative_review])
